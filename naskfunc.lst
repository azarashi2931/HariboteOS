     1 00000000                                 ; hello-os
     2 00000000                                 ; TAB = 4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]                    ; オブジェクトファイルを作るモード
     5 00000000                                 [INSTRSET "i486p"]	    			; 486の命令まで使いたいという記述
     6 00000000                                 [BITS 32]                           ; 32ビットモードの機械語を作らせる
     7 00000000                                 
     8 00000000                                 
     9 00000000                                 ; オブジェクトファイルのための情報
    10 00000000                                 [FILE "naskfunc.nasm"]              ; ソースファイル名の情報
    11 00000000                                 
    12 00000000                                         GLOBAL  _io_hlt, _io_cli, _io_sti, _io_stihlt ; このプログラムに含まれる関数名
    13 00000000                                         GLOBAL  _io_in8, _io_in16, _io_in32
    14 00000000                                         GLOBAL  _io_out8, _io_out16, _io_out32
    15 00000000                                         GLOBAL  _io_load_eflags, _io_store_eflags
    16 00000000                                 
    17 00000000                                 ; 以下は実際の関数
    18 00000000                                 
    19                                          [SECTION .text]                     ; オブジェクトファイルではこれを書いてからプログラムを書く
    20 00000000                                 
    21 00000000                                 _io_hlt:                            ; void io_hlt(void);
    22 00000000 F4                                  HLT
    23 00000001 C3                                  RET
    24 00000002                                 
    25 00000002                                 _io_cli:                            ; void io_cli(void);
    26 00000002 FA                                  CLI
    27 00000003 C3                                  RET
    28 00000004                                 
    29 00000004                                 _io_sti:                            ; void io_sti(void);
    30 00000004 FB                                  STI
    31 00000005 C3                                  RET
    32 00000006                                 
    33 00000006                                 _io_stihlt:                         ; void io_stihlt(void);
    34 00000006 FB                                  STI
    35 00000007 F4                                  HLT
    36 00000008 C3                                  RET
    37 00000009                                 
    38 00000009                                 _io_in8:                            ; int io_in8(int port);
    39 00000009 8B 54 24 04                         MOV     EDX, [ESP+4]            ; [ESP+4]にportが入っているのでEDXに読み込む
    40 0000000D B8 00000000                         MOV     EAX, 0                  ; EAX = 0
    41 00000012 EC                                  IN      AL, DX                  ; DX番portからALに値を読み出す(AL:今回は8bitだから？,DX:portは16bit?)
    42 00000013 C3                                  RET   
    43 00000014                                 
    44 00000014                                 _io_in16:                           ; int io_in16(int port);
    45 00000014 8B 54 24 04                         MOV     EDX, [ESP+4]            ; [ESP+4]にportが入っているのでEDXに読み込む
    46 00000018 B8 00000000                         MOV     EAX, 0                  ; EAX = 0
    47 0000001D 66 ED                               IN      AX, DX                  ; DX番portからAXに値を読み出す
    48 0000001F C3                                  RET   
    49 00000020                                 
    50 00000020                                 _io_in32:                           ; int io_in32(int port);
    51 00000020 8B 54 24 04                         MOV     EDX, [ESP+4]            ; [ESP+4]にportが入っているのでEDXに読み込む
    52 00000024 ED                                  IN      EAX, DX                 ; DX番portからEAXに値を読み出す
    53 00000025 C3                                  RET   
    54 00000026                                 
    55 00000026                                 _io_out8:                           ; void io_out8(int port, int data);
    56 00000026 8B 54 24 04                         MOV     EDX, [ESP+4]            ; [ESP+4]にportが入っているのでEDXに読み込む
    57 0000002A 8A 44 24 08                         MOV     AL, [ESP+8]             ; [ESP+8]にdataが入っているのでALに読み込む
    58 0000002E EE                                  OUT     DX, AL                  ; DX番portからALの値を書き込む(AL:今回は8bitだから？,DX:portは16bit?)
    59 0000002F C3                                  RET   
    60 00000030                                 
    61 00000030                                 _io_out16:                          ; void io_out16(int port, int data);
    62 00000030 8B 54 24 04                         MOV     EDX, [ESP+4]            ; [ESP+4]にportが入っているのでEDXに読み込む
    63 00000034 8B 44 24 08                         MOV     EAX, [ESP+8]            ; [ESP+8]にdataが入っているのでEAXに読み込む(AXでは？)
    64 00000038 66 EF                               OUT     DX, AX                  ; DX番portからAXの値を書き込む
    65 0000003A C3                                  RET   
    66 0000003B                                 
    67 0000003B                                 _io_out32:                          ; void io_out32(int port, int data);
    68 0000003B 8B 54 24 04                         MOV     EDX, [ESP+4]            ; [ESP+4]にportが入っているのでEDXに読み込む
    69 0000003F 8B 44 24 08                         MOV     EAX, [ESP+8]            ; [ESP+8]にdataが入っているのでEAXに読み込む
    70 00000043 EF                                  OUT     DX, EAX                 ; DX番portからEAXの値を書き込む
    71 00000044 C3                                  RET   
    72 00000045                                 
    73 00000045                                 _io_load_eflags:                    ; int io_load_eflags(void);
    74 00000045 9C                                  PUSHFD                          ; push eflagsの意味
    75 00000046 58                                  POP     EAX
    76 00000047 C3                                  RET
    77 00000048                                 
    78 00000048                                 _io_store_eflags:                   ; void io_store_eflags(int data);
    79 00000048 8B 44 24 04                         MOV     EAX, [ESP+4]
    80 0000004C 50                                  PUSH    EAX
    81 0000004D 9D                                  POPFD                           ; pop eflagsの意味
    82 0000004E C3                                  RET
